#
# Copyright Red Hat Inc. and/or its affiliates and other contributors
# as indicated by the authors tag. All rights reserved.
#
# This copyrighted material is made available to anyone wishing to use,
# modify, copy, or redistribute it subject to the terms and conditions
# of the GNU General Public License version 2.
# 
# This particular file is subject to the "Classpath" exception as provided in the 
# LICENSE file that accompanied this code.
# 
# This program is distributed in the hope that it will be useful, but WITHOUT A
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE.  See the GNU General Public License for more details.
# You should have received a copy of the GNU General Public License,
# along with this distribution; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
# MA  02110-1301, USA.
#

error = Error: {0}
error.failedWriteArtifact = Failed to write artifact {0} to output repository: {1}
error.optionDnotSupported = -d: option not yet supported (though perhaps you meant -out?)
error.optionUnknown = {0} : unknown option
error.tooManyArguments = Too many arguments
error.noModuleSpecified = Missing a module spec argument (module/version)
error.noJarFileSpecified = Missing a jar file to publish
error.optionMissing = Expected an argument for {0} option
error.problemsFound = Problems were found, aborting.
error.problemsFoundForced = Problems were found, but forced to continue
error.problemsFoundSuggest = Problems were found, aborting. Try adding a descriptor file, see help for more information.
error.markShared = MARK shared
error.checkFailed = UNABLE TO CHECK

error.jarFile.empty = Jar file cannot be empty
error.jarFile.doesNotExist = Jar file {0} does not exist
error.jarFile.isDirectory = Jar file {0} is a directory (must be a file)
error.jarFile.notReadable = Jar file {0} cannot be read
error.jarFile.notJar = Jar file {0} does not end with ''.jar'' extension
error.jarFile.unableToAnalyze = Jar file could not be analyzed

error.descriptorFile.doesNotExist = Descriptor file {0} does not exist
error.descriptorFile.isDirectory = Descriptor file {0} is a directory (must be a file)
error.descriptorFile.notReadable = Descriptor file {0} cannot be read
error.descriptorFile.badSuffix = Descriptor file {0} does not end with ''.xml'' or ''.properties'' extension
error.descriptorFile.invalid.xml = Descriptor file {0} is not a valid module.xml file: {1}
error.descriptorFile.invalid.properties = Descriptor file {0} is not a valid module.properties file
error.descriptorFile.invalid.module.name = Invalid module name ''{0}'' in module descriptor dependency list
error.descriptorFile.invalid.module.version = Invalid module version ''{0}'' in module descriptor dependency list
error.descriptorFile.invalid.module.default = Invalid module import in module descriptor dependency list: cannot import default module

error.moduleSpec.empty = Module spec cannot be empty
error.moduleSpec.noName = Module name cannot be empty
error.moduleSpec.noVersion = Module version cannot be empty
error.moduleSpec.missingVersion = Module version missing (and module is not default)
error.cmrError = Error: {0}
log.warning = Warning: {0}
log.info = Info: {0}
log.debug = Debug: {0}

info.usage = Usage\: ceylon-import-jar [options...] moduleName[/version] jar-file\nwhere possible options include\:\n  -out <url>\:          Output module repository (default\: ''./modules'')\n  -user <value>\:       User name for output repository (HTTP only)\n  -pass <value>\:       Password for output repository (HTTP only)\n  -d\:                  Not supported yet\n  -debug\:              Enable debug output\n  -help\:               Prints help usage\n  -version\:            Prints version number\n

info.version = Version: ceylon-import-jar {0}

info.ok = OK
info.okButUnused = OK, but seems unused
info.notFound = NOT FOUND
info.noProblems = No problems found
info.noProblems.publishing = , publishing...
info.forcedUpdate = Forced update, no checks were made
info.published = Published module {0} to repository {1}
info.checkingDependencies = Checking declared dependencies:

info.declare.jdk.imports = The following JDK modules are used and could be declared as shared imports:
info.declare.module.imports = Modules containing the following packages need to be declared as shared imports:
info.declare.class.imports = Modules containing the following classes need to be declared as shared imports:
info.try.importing = try importing ''{0}''
info.try.importing.multiple = try importing one of the following:
info.try.suggestions = (Tip: try running again with the ''--show-suggestions'' option)
 